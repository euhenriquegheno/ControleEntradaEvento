unit frmPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.ExtCtrls, udm, efuncoes, Vcl.StdCtrls, Vcl.ComCtrls, Vcl.Mask, Vcl.DBCtrls,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Vcl.Menus, Vcl.Buttons;

type
  TForm1 = class(TForm)
    dsCliente: TDataSource;
    pcPrincipal: TPageControl;
    tsConsulta: TTabSheet;
    tsCadastro: TTabSheet;
    DBGrid1: TDBGrid;
    Panel1: TPanel;
    btnCadastrar: TButton;
    btnAlterar: TButton;
    btnExcluir: TButton;
    Panel2: TPanel;
    edtNome: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    cbSetor: TComboBox;
    btnBuscar: TButton;
    cbStatus: TComboBox;
    Label3: TLabel;
    btnConfCancEntrada: TButton;
    Label4: TLabel;
    DBEdit1: TDBEdit;
    Label5: TLabel;
    DBEdit2: TDBEdit;
    Label6: TLabel;
    DBEdit3: TDBEdit;
    Label7: TLabel;
    DBEdit4: TDBEdit;
    Label8: TLabel;
    Label10: TLabel;
    DBComboBox1: TDBComboBox;
    Panel3: TPanel;
    btnCancelar: TButton;
    btnGravar: TButton;
    edtCpfRg: TEdit;
    Label9: TLabel;
    PopupMenu1: TPopupMenu;
    Cadastrar1: TMenuItem;
    Alterar1: TMenuItem;
    Cancelar1: TMenuItem;
    Excluir1: TMenuItem;
    Gravar1: TMenuItem;
    rgOrdenacao: TRadioGroup;
    MainMenu1: TMainMenu;
    Utilitario1: TMenuItem;
    lbRegistros: TLabel;
    procedure pcPrincipalChange(Sender: TObject);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure btnCadastrarClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnConfCancEntradaClick(Sender: TObject);
    procedure btnCancEntradaClick(Sender: TObject);
    procedure DBGrid1DblClick(Sender: TObject);
    procedure btnBuscarClick(Sender: TObject);
    procedure rgOrdenacaoClick(Sender: TObject);
    procedure cbSetorChange(Sender: TObject);
    procedure cbStatusChange(Sender: TObject);
    procedure edtNomeExit(Sender: TObject);
    procedure edtCpfRgExit(Sender: TObject);
    procedure edtNomeKeyPress(Sender: TObject; var Key: Char);
    procedure edtCpfRgKeyPress(Sender: TObject; var Key: Char);
    procedure cbSetorKeyPress(Sender: TObject; var Key: Char);
    procedure cbStatusKeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit2KeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit3KeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit4KeyPress(Sender: TObject; var Key: Char);
    procedure DBComboBox1KeyPress(Sender: TObject; var Key: Char);
    procedure Utilitario1Click(Sender: TObject);
  private
    { Private declarations }
  public
    procedure verificaStatus;
    procedure listarCliente;
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

uses frmDeletaClientes;

procedure TForm1.btnAlterarClick(Sender: TObject);
begin
  dm.qrCliente.Edit;
  pcPrincipal.ActivePage := tsCadastro;
  DBEdit2.SetFocus;
end;

procedure TForm1.btnBuscarClick(Sender: TObject);
begin
  listarCliente;
end;

procedure TForm1.btnCadastrarClick(Sender: TObject);
begin
  dm.qrCliente.Insert;
  pcPrincipal.ActivePage := tsCadastro;
  DBEdit2.SetFocus;
end;

procedure TForm1.btnCancelarClick(Sender: TObject);
begin
  if Application.MessageBox('Deseja realmente cancelar?', 'ATENÇÃO', mb_iconquestion + mb_yesno) = idYes then
  Begin
    dm.qrCliente.Cancel;
    pcPrincipal.ActivePage := tsConsulta;
  End;
end;

procedure TForm1.btnCancEntradaClick(Sender: TObject);
begin
  verificaStatus;
end;

procedure TForm1.btnConfCancEntradaClick(Sender: TObject);
begin
  verificaStatus;
end;

procedure TForm1.btnExcluirClick(Sender: TObject);
begin
  Try
    if Application.MessageBox('Deseja realmente excluir o cliente?', 'ATENÇÃO', mb_iconquestion + mb_yesno) = idYes then
    begin
      dm.qrCliente.delete;
    end;
  Except
    ShowMessage('Nenhum cliente para excluir!');
  End;
end;

procedure TForm1.btnGravarClick(Sender: TObject);
begin
  Try
    dm.qrClienteSTATUS.AsString := 'NÃO ENTROU';
    dm.qrCliente.Post;
    pcPrincipal.ActivePage := tsConsulta;
    listarCliente;
  Except
    if DBEdit2.Text = '' then
      ShowMessage('Insira algum nome para gravar')
    else
      ShowMessage('CODIGO DUPLICADO!');
  End;
end;

procedure TForm1.cbSetorChange(Sender: TObject);
begin
  listarCliente;
end;

procedure TForm1.cbSetorKeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    cbStatus.SetFocus;
end;

procedure TForm1.cbStatusChange(Sender: TObject);
begin
  listarCliente;
end;

procedure TForm1.cbStatusKeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    rgOrdenacao.SetFocus;
end;

procedure TForm1.DBComboBox1KeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    btnGravar.SetFocus;
end;

procedure TForm1.DBEdit2KeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    dbedit3.SetFocus;
end;

procedure TForm1.DBEdit3KeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    dbedit4.SetFocus;
end;

procedure TForm1.DBEdit4KeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    DBComboBox1.SetFocus;
end;

procedure TForm1.DBGrid1DblClick(Sender: TObject);
begin
  verificaStatus;
end;

procedure TForm1.DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  if (gdRowSelected in State) or (gdSelected in State) then
  begin
    (Sender as TDBGrid).Canvas.Brush.Style := bsSolid;
    (Sender as TDBGrid).Canvas.Brush.Color := cl3DLight;
    (Sender as TDBGrid).Canvas.Font.Style := [fsbold];
    (Sender as TDBGrid).Canvas.FillRect(Rect);
    (Sender as TDBGrid).Canvas.Font.Color := clHotLight;
    (Sender as TDBGrid).DefaultDrawColumnCell(Rect,DataCol,Column,State);
  end
  else
  begin
    (Sender as TDBGrid).Canvas.Brush.Style := bsSolid;
    (Sender as TDBGrid).Canvas.Brush.Color := clwhite;
    (Sender as TDBGrid).Canvas.Font.Style := [fsbold];
    (Sender as TDBGrid).Canvas.FillRect(Rect);
    (Sender as TDBGrid).Canvas.Font.Color := clHotLight;
    (Sender as TDBGrid).DefaultDrawColumnCell(Rect,DataCol,Column,State);
  end;

  if (Sender as TDBGrid).DataSource.DataSet.FieldByName('STATUS').Value = 'ENTROU'   then
  begin
    (Sender as TDBGrid).Canvas.Font.Color := clWhite;
    (Sender as TDBGrid).Canvas.Font.Style:= [fsbold];
    (Sender as TDBGrid).Canvas.Brush.Style := bsSolid;
    (Sender as TDBGrid).Canvas.Brush.Color := clGreen;
  end
  else
  begin
    (Sender as TDBGrid).Canvas.Font.Color := clRed;
    (Sender as TDBGrid).Canvas.Font.Style:= [fsbold];
  end;

  (Sender as TDBGrid).Canvas.FillRect(Rect);
  (Sender as TDBGrid).DefaultDrawDataCell(Rect, (Sender as   TDBGrid).columns[datacol].field, State);
end;

procedure TForm1.edtCpfRgExit(Sender: TObject);
begin
  listarCliente;
end;

procedure TForm1.edtCpfRgKeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    cbSetor.SetFocus;
end;

procedure TForm1.edtNomeExit(Sender: TObject);
begin
  listarCliente;
end;

procedure TForm1.edtNomeKeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    edtCpfRg.SetFocus;
end;

procedure TForm1.FormShow(Sender: TObject);
begin
  pcPrincipal.ActivePage := tsConsulta;

  listarCliente;
end;

procedure TForm1.listarCliente;
begin
  dm.qrCliente.SQL.Clear;
  dm.qrCliente.SQL.Add('select * from cliente');
  dm.qrCliente.SQL.Add('where 1 = 1');

  if edtNome.Text <> '' then
    dm.qrCliente.SQL.Add(' and (nome like ' + UpperCase(QuotedStr('%' + edtNome.Text + '%') + ')'));

  if edtCpfRg.Text <> '' then
    dm.qrCliente.SQL.Add(' and (cpf_rg = ' + QuotedStr(edtCpfRg.Text) + ')');

  if cbSetor.Text <> 'TODOS' then
    dm.qrCliente.SQL.Add(' and (setor = ' + QuotedStr(cbSetor.Text) + ')');

  if cbStatus.Text <> 'TODOS' then
    dm.qrCliente.SQL.Add(' and (status = ' + QuotedStr(cbStatus.Text) + ')');

  if rgOrdenacao.ItemIndex = 0 then
    dm.qrCliente.SQL.Add(' order by id')
  else if rgOrdenacao.ItemIndex = 1 then
    dm.qrCliente.SQL.Add(' order by nome')
  else if rgOrdenacao.ItemIndex = 2 then
    dm.qrCliente.SQL.Add(' order by setor')
  else if rgOrdenacao.ItemIndex = 3 then
    dm.qrCliente.SQL.Add(' order by status');

  dm.qrCliente.Open;


  lbRegistros.Caption := 'Registros ' + intToStr(dbgrid1.DataSource.DataSet.RecordCount);

end;

procedure TForm1.pcPrincipalChange(Sender: TObject);
begin
  if (dm.qrCliente.State = dsInsert) or
        (dm.qrCliente.State = dsEdit) then
  Begin
    Application.MessageBox('Grave ou cancele antes de voltar!', 'ATENÇÃO', MB_ICONEXCLAMATION);
    pcPrincipal.ActivePage := tsCadastro;
  End
  Else
  Begin
    Application.MessageBox('Voce so pode acessar essa aba inserindo ou editando algum cliente!', 'ATENÇÃO', MB_ICONEXCLAMATION);
    pcPrincipal.ActivePage := tsConsulta;
  End;
end;

procedure TForm1.rgOrdenacaoClick(Sender: TObject);
begin
  listarCliente;
end;

procedure TForm1.Utilitario1Click(Sender: TObject);
begin
  frmDeletarClientes := TfrmDeletarClientes.Create(Self);
  try
    frmDeletarClientes.ShowModal;
  finally
    freeandnil(frmDeletarClientes);
    listarCliente;
  end;
end;

procedure TForm1.verificaStatus;
begin
  if dm.qrCliente.IsEmpty then
    Abort;

  dm.qrCliente.Edit;

  if dm.qrClienteSTATUS.AsString = 'ENTROU' then
    dm.qrClienteSTATUS.AsString := 'NÃO ENTROU'
  else if dm.qrClienteSTATUS.AsString = 'NÃO ENTROU' then
    dm.qrClienteSTATUS.AsString := 'ENTROU';

  dm.qrCliente.Post;
end;

end.
